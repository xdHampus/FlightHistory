// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using FlightHistoryScraper.Json;
//
//    var flight = Flight.FromJson(jsonString);

namespace FlightHistoryScraper.Json
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using DbModel = FlightHistoryCore.Model;
    using Newtonsoft.Json.Converters;
    using System.Linq;

    public partial class Flight
    {
        [JsonProperty("identification", NullValueHandling = NullValueHandling.Ignore)]
        public FlightIdentification Identification { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public FlightStatus Status { get; set; }

        [JsonProperty("level", NullValueHandling = NullValueHandling.Ignore)]
        public string Level { get; set; }

        [JsonProperty("promote", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Promote { get; set; }

        [JsonProperty("aircraft", NullValueHandling = NullValueHandling.Ignore)]
        public FlightAircraft Aircraft { get; set; }

        [JsonProperty("airline")]
        public Airline Airline { get; set; }

        [JsonProperty("owner")]
        public object Owner { get; set; }

        [JsonProperty("airspace")]
        public object Airspace { get; set; }

        [JsonProperty("airport", NullValueHandling = NullValueHandling.Ignore)]
        public FlightAirport Airport { get; set; }

        [JsonProperty("flightHistory", NullValueHandling = NullValueHandling.Ignore)]
        public FlightHistory FlightHistory { get; set; }

        [JsonProperty("ems")]
        public object Ems { get; set; }

        [JsonProperty("availability", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Availability { get; set; }



        [JsonProperty("time", NullValueHandling = NullValueHandling.Ignore)]
        public FlightTime Time { get; set; }

        [JsonProperty("trail", NullValueHandling = NullValueHandling.Ignore)]
        public List<Trail> Trail { get; set; }

        [JsonProperty("firstTimestamp", NullValueHandling = NullValueHandling.Ignore)]
        public long? FirstTimestamp { get; set; }

        [JsonProperty("s", NullValueHandling = NullValueHandling.Ignore)]
        public string S { get; set; }


    }

    public partial class FlightAircraft
    {
        [JsonProperty("model", NullValueHandling = NullValueHandling.Ignore)]
        public Model Model { get; set; }

        [JsonProperty("countryId")]
        public long? CountryId { get; set; }

        [JsonProperty("registration")]
        public string Registration { get; set; }

        [JsonProperty("hex", NullValueHandling = NullValueHandling.Ignore)]
        public string Hex { get; set; }

        [JsonProperty("age")]
        public object Age { get; set; }

        [JsonProperty("msn")]
        public object Msn { get; set; }

        [JsonProperty("images", NullValueHandling = NullValueHandling.Ignore)]
        public Images Images { get; set; }
    }

    public partial class Images
    {
        [JsonProperty("sideview", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Sideview { get; set; }

        [JsonProperty("thumbnails", NullValueHandling = NullValueHandling.Ignore)]
        public List<Large> Thumbnails { get; set; }

        [JsonProperty("medium", NullValueHandling = NullValueHandling.Ignore)]
        public List<Large> Medium { get; set; }

        [JsonProperty("large", NullValueHandling = NullValueHandling.Ignore)]
        public List<Large> Large { get; set; }
    }

    public partial class Large
    {
        [JsonProperty("src", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Src { get; set; }

        [JsonProperty("link", NullValueHandling = NullValueHandling.Ignore)]
        public string Link { get; set; }

        [JsonProperty("copyright", NullValueHandling = NullValueHandling.Ignore)]
        public string Copyright { get; set; }

        [JsonProperty("source", NullValueHandling = NullValueHandling.Ignore)]
        public string Source { get; set; }
    }

    public partial class Model
    {
        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public string Code { get; set; }

        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public string Text { get; set; }
    }

    public partial class Airline
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("short", NullValueHandling = NullValueHandling.Ignore)]
        public string Short { get; set; }

        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public Code Code { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; set; }
    }

    public partial class Code
    {
        [JsonProperty("iata", NullValueHandling = NullValueHandling.Ignore)]
        public string Iata { get; set; }

        [JsonProperty("icao", NullValueHandling = NullValueHandling.Ignore)]
        public string Icao { get; set; }
    }

    public partial class FlightAirport
    {
        [JsonProperty("origin")]
        public PurpleDestination Origin { get; set; }

        [JsonProperty("destination")]
        public PurpleDestination Destination { get; set; }

        [JsonProperty("real")]
        public object Real { get; set; }
    }

    public partial class PurpleDestination
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public Code Code { get; set; }

        [JsonProperty("position", NullValueHandling = NullValueHandling.Ignore)]
        public Position Position { get; set; }

        [JsonProperty("timezone", NullValueHandling = NullValueHandling.Ignore)]
        public Timezone Timezone { get; set; }

        [JsonProperty("visible", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Visible { get; set; }

        [JsonProperty("website", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Website { get; set; }

        [JsonProperty("info", NullValueHandling = NullValueHandling.Ignore)]
        public Info Info { get; set; }
    }

    public partial class Info
    {
        [JsonProperty("terminal")]
        public object Terminal { get; set; }

        [JsonProperty("baggage")]
        public object Baggage { get; set; }

        [JsonProperty("gate")]
        public object Gate { get; set; }
    }

    public partial class Position
    {
        [JsonProperty("latitude", NullValueHandling = NullValueHandling.Ignore)]
        public double? Latitude { get; set; }

        [JsonProperty("longitude", NullValueHandling = NullValueHandling.Ignore)]
        public double? Longitude { get; set; }

        [JsonProperty("altitude", NullValueHandling = NullValueHandling.Ignore)]
        public long? Altitude { get; set; }

        [JsonProperty("country", NullValueHandling = NullValueHandling.Ignore)]
        public Country Country { get; set; }

        [JsonProperty("region", NullValueHandling = NullValueHandling.Ignore)]
        public Region Region { get; set; }
    }

    public partial class Country
    {
        [JsonProperty("id")]
        public long? Id { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public string Code { get; set; }

        [JsonProperty("codeLong", NullValueHandling = NullValueHandling.Ignore)]
        public string CodeLong { get; set; }
    }

    public partial class Region
    {
        [JsonProperty("city", NullValueHandling = NullValueHandling.Ignore)]
        public string City { get; set; }
    }

    public partial class Timezone
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("offset", NullValueHandling = NullValueHandling.Ignore)]
        public long? Offset { get; set; }

        [JsonProperty("offsetHours", NullValueHandling = NullValueHandling.Ignore)]
        public string OffsetHours { get; set; }

        [JsonProperty("abbr", NullValueHandling = NullValueHandling.Ignore)]
        public string Abbr { get; set; }

        [JsonProperty("abbrName", NullValueHandling = NullValueHandling.Ignore)]
        public string AbbrName { get; set; }

        [JsonProperty("isDst", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsDst { get; set; }
    }

    public partial class FlightHistory
    {
        [JsonProperty("aircraft")]
        public List<AircraftElement> Aircraft { get; set; }
    }

    public partial class AircraftElement
    {
        [JsonProperty("identification", NullValueHandling = NullValueHandling.Ignore)]
        public AircraftIdentification Identification { get; set; }

        [JsonProperty("airport", NullValueHandling = NullValueHandling.Ignore)]
        public AircraftAirport Airport { get; set; }

        [JsonProperty("time", NullValueHandling = NullValueHandling.Ignore)]
        public AircraftTime Time { get; set; }
    }

    public partial class AircraftAirport
    {
        [JsonProperty("origin", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyDestination Origin { get; set; }

        [JsonProperty("destination", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyDestination Destination { get; set; }
    }

    public partial class FluffyDestination
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("code", NullValueHandling = NullValueHandling.Ignore)]
        public Code Code { get; set; }

        [JsonProperty("position", NullValueHandling = NullValueHandling.Ignore)]
        public Position Position { get; set; }

        [JsonProperty("timezone", NullValueHandling = NullValueHandling.Ignore)]
        public Timezone Timezone { get; set; }

        [JsonProperty("visible", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Visible { get; set; }

        [JsonProperty("website", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Website { get; set; }
    }

    public partial class AircraftIdentification
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("number", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleNumber Number { get; set; }
    }

    public partial class PurpleNumber
    {
        [JsonProperty("default", NullValueHandling = NullValueHandling.Ignore)]
        public string Default { get; set; }
    }

    public partial class AircraftTime
    {
        [JsonProperty("real", NullValueHandling = NullValueHandling.Ignore)]
        public Real Real { get; set; }
    }

    public partial class Real
    {
        [JsonProperty("departure", NullValueHandling = NullValueHandling.Ignore)]
        public long? Departure { get; set; }
    }

    public partial class FlightIdentification
    {
     //   [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
     //   [JsonConverter(typeof(ParseStringConverter))]
     //   public long? Id { get; set; }
        
        public string? Id { get; set; }


        [JsonProperty("row", NullValueHandling = NullValueHandling.Ignore)]
        public long? Row { get; set; }

        [JsonProperty("number", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyNumber Number { get; set; }

        [JsonProperty("callsign", NullValueHandling = NullValueHandling.Ignore)]
        public string Callsign { get; set; }
    }

    public partial class FluffyNumber
    {
        [JsonProperty("default")]
        public string Default { get; set; }

        [JsonProperty("alternative")]
        public object Alternative { get; set; }
    }

    public partial class FlightStatus
    {
        [JsonProperty("live", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Live { get; set; }

        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public string Text { get; set; }

        [JsonProperty("icon", NullValueHandling = NullValueHandling.Ignore)]
        public string Icon { get; set; }

        [JsonProperty("estimated")]
        public object Estimated { get; set; }

        [JsonProperty("ambiguous", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Ambiguous { get; set; }

        [JsonProperty("generic", NullValueHandling = NullValueHandling.Ignore)]
        public Generic Generic { get; set; }
    }

    public partial class Generic
    {
        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public GenericStatus Status { get; set; }

        [JsonProperty("eventTime", NullValueHandling = NullValueHandling.Ignore)]
        public EventTime EventTime { get; set; }
    }

    public partial class EventTime
    {
        [JsonProperty("utc", NullValueHandling = NullValueHandling.Ignore)]
        public long? Utc { get; set; }

        [JsonProperty("local")]
        public long? Local { get; set; }
    }

    public partial class GenericStatus
    {
        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public string Text { get; set; }

        [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
        public string Color { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }
    }

    public partial class FlightTime
    {
        [JsonProperty("scheduled", NullValueHandling = NullValueHandling.Ignore)]
        public Estimated Scheduled { get; set; }

        [JsonProperty("real", NullValueHandling = NullValueHandling.Ignore)]
        public Estimated Real { get; set; }

        [JsonProperty("estimated", NullValueHandling = NullValueHandling.Ignore)]
        public Estimated Estimated { get; set; }

        [JsonProperty("other", NullValueHandling = NullValueHandling.Ignore)]
        public Other Other { get; set; }

        [JsonProperty("historical")]
        public Historical Historical { get; set; }
    }

    public partial class Estimated
    {
        [JsonProperty("departure")]
        public long? Departure { get; set; }

        [JsonProperty("arrival")]
        public long? Arrival { get; set; }
    }

    public partial class Historical
    {
        [JsonProperty("flighttime", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Flighttime { get; set; }

        [JsonProperty("delay", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Delay { get; set; }
    }

    public partial class Other
    {
        [JsonProperty("eta")]
        public long? Eta { get; set; }

        [JsonProperty("updated")]
        public long? Updated { get; set; }
    }

    public partial class Trail
    {
        [JsonProperty("lat", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lat { get; set; }

        [JsonProperty("lng", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lng { get; set; }

        [JsonProperty("alt", NullValueHandling = NullValueHandling.Ignore)]
        public long? Alt { get; set; }

        [JsonProperty("spd", NullValueHandling = NullValueHandling.Ignore)]
        public long? Spd { get; set; }

        [JsonProperty("ts", NullValueHandling = NullValueHandling.Ignore)]
        public long? Ts { get; set; }

        [JsonProperty("hd", NullValueHandling = NullValueHandling.Ignore)]
        public long? Hd { get; set; }
    }


    public partial class Flight
    {
        public static Flight FromJson(string json) => JsonConvert.DeserializeObject<Flight>(json, FlightHistoryScraper.Json.ConverterBase.Settings);

        public static DbModel.Flight ToModel(Flight flight)
        {


            var dbFlight = new DbModel.Flight()
            {
                Level = flight.Level,
                Promote = flight.Promote,
                FlightHistory = ParseFlightHistory(flight),
                Trails = ParseTrails(flight),
                FirstTimestamp = flight.FirstTimestamp,
                S = flight.S

                
            };

            if (flight.Identification != null)
            {
                dbFlight.Identification = new DbModel.FlightIdentification()
                {
                    Callsign = flight.Identification.Callsign,
                    FlightIdentifier = flight.Identification.Id,
                    Row = flight.Identification.Row,
                };
            }
            if (flight.Status != null)
            {
                dbFlight.Status = new DbModel.FlightStatus()
                {
                    Live = flight.Status.Live,
                    Text = flight.Status.Text,
                    Icon = flight.Status.Icon,
                    Ambiguous = flight.Status.Ambiguous,
                };
            }
            if (flight.Aircraft != null)
            {
                dbFlight.Aircraft = new DbModel.Aircraft()
                {
                    CountryId = flight.Aircraft.CountryId,
                    Registration = flight.Aircraft.Registration,
                    Hex = flight.Aircraft.Hex,
                };
            }
            if (flight.Airline != null)
            {
                dbFlight.Airline = new DbModel.Airline()
                {
                    Name = flight.Airline.Name,
                    Short = flight.Airline.Short,
                    Url = flight.Airline.Url
                };
            }
            if (flight.Time != null
                && flight.Time.Scheduled != null
                && flight.Time.Real != null
                && flight.Time.Estimated != null)
            {
                dbFlight.Time = new DbModel.FlightTime()
                {
                    Scheduled = new DbModel.Estimate()
                    {
                        Departure = flight.Time.Scheduled.Departure,
                        Arrival = flight.Time.Scheduled.Arrival
                    },
                    Real = new DbModel.Estimate()
                    {
                        Departure = flight.Time.Real.Departure,
                        Arrival = flight.Time.Real.Arrival
                    },
                    Estimated = new DbModel.Estimate()
                    {
                        Departure = flight.Time.Estimated.Departure,
                        Arrival = flight.Time.Estimated.Arrival
                    },
                };
            }




            return dbFlight;
        }

        public static List<DbModel.Trail> ParseTrails(Flight flight)
        {

            var result = new List<DbModel.Trail>();

            if (flight.Trail != null)
            {
                result = ParseTrails(flight.Trail);
            }



            return result;
        }

        public static List<DbModel.Trail> ParseTrails(List<Trail> trails)
        {


            var result = new List<DbModel.Trail>();

            if (trails != null)
            {
                foreach (var item in trails)
                {
                    result.Add(new DbModel.Trail()
                    {
                        Lat = item.Lat,
                        Lng = item.Lng,
                        Alt = item.Alt,
                        Spd = item.Spd,
                        Ts = item.Ts,
                        Hd = item.Hd
                    });

                }
            }



            return result;


        }


        private static List<DbModel.AircraftElement> ParseFlightHistory(Flight flight)
        {
            var result = new List<DbModel.AircraftElement>();

            if(flight.FlightHistory != null && flight.FlightHistory.Aircraft != null)
            {
                foreach (var item in flight.FlightHistory.Aircraft)
                {

                    result.Add(new DbModel.AircraftElement()
                    {
                        Identification = new DbModel.AircraftIdentification()
                        {
                            AircraftIdentifier = item.Identification.Id,
                            PurplerNumber = item.Identification.Number.Default
                        },
                        Departure = item.Time.Real.Departure
                    });

                }
            }

            return result;
        }
    }


    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
