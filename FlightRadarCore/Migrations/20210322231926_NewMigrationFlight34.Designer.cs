// <auto-generated />
using System;
using FlightRadarCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FlightRadarCore.Migrations
{
    [DbContext(typeof(FlightDbContext))]
    [Migration("20210322231926_NewMigrationFlight34")]
    partial class NewMigrationFlight34
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("FlightRadarCore.Model.Aircraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Age")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Hex")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelText")
                        .HasColumnType("TEXT");

                    b.Property<string>("Msn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Registration")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Aircraft");
                });

            modelBuilder.Entity("FlightRadarCore.Model.AircraftElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AirportId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Departure")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FlightId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IdentificationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AirportId");

                    b.HasIndex("FlightId");

                    b.HasIndex("IdentificationId");

                    b.ToTable("AircraftElements");
                });

            modelBuilder.Entity("FlightRadarCore.Model.AircraftIdentification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AircraftIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("PurplerNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AircraftIdentifications");
                });

            modelBuilder.Entity("FlightRadarCore.Model.Airline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DestinationIata")
                        .HasColumnType("TEXT");

                    b.Property<string>("DestinationIcao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Short")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Airlines");
                });

            modelBuilder.Entity("FlightRadarCore.Model.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Baggage")
                        .HasColumnType("TEXT");

                    b.Property<string>("DestinationIata")
                        .HasColumnType("TEXT");

                    b.Property<string>("DestinationIcao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PositionId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Terminal")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TimezoneId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Visible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("TimezoneId");

                    b.ToTable("Destinations");
                });

            modelBuilder.Entity("FlightRadarCore.Model.Estimate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Arrival")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Departure")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Estimates");
                });

            modelBuilder.Entity("FlightRadarCore.Model.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AircraftId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AirlineId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AirportId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Airspace")
                        .HasColumnType("TEXT");

                    b.Property<string>("Availability")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ems")
                        .HasColumnType("TEXT");

                    b.Property<long?>("FirstTimestamp")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IdentificationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Level")
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Promote")
                        .HasColumnType("INTEGER");

                    b.Property<string>("S")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("ScanCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TimeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AircraftId");

                    b.HasIndex("AirlineId");

                    b.HasIndex("AirportId");

                    b.HasIndex("IdentificationId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TimeId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("FlightRadarCore.Model.FlightIdentification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Callsign")
                        .HasColumnType("TEXT");

                    b.Property<string>("FlightIdentifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("NumberAlternative")
                        .HasColumnType("TEXT");

                    b.Property<string>("NumberDefault")
                        .HasColumnType("TEXT");

                    b.Property<long?>("Row")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("FlightIdentifications");
                });

            modelBuilder.Entity("FlightRadarCore.Model.FlightStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Ambiguous")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EstimateId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("GenericEventLocal")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("GenericEventcUtc")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GenericStatusColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenericStatusText")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenericStatusType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Live")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EstimateId");

                    b.ToTable("FlightStatuses");
                });

            modelBuilder.Entity("FlightRadarCore.Model.FlightTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EstimatedId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Eta")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("HistoricalDelay")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("HistoricalFlighttime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RealId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ScheduledId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Updated")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EstimatedId");

                    b.HasIndex("RealId");

                    b.HasIndex("ScheduledId");

                    b.ToTable("FlightTimes");
                });

            modelBuilder.Entity("FlightRadarCore.Model.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Altitude")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryName")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double?>("Longitude")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("FlightRadarCore.Model.RouteDestination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DestinationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OriginId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RealId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("OriginId");

                    b.HasIndex("RealId");

                    b.ToTable("RouteDestinations");
                });

            modelBuilder.Entity("FlightRadarCore.Model.TimeZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Abbr")
                        .HasColumnType("TEXT");

                    b.Property<string>("AbbrName")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsDst")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long?>("Offset")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OffsetHours")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TimeZones");
                });

            modelBuilder.Entity("FlightRadarCore.Model.Trail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Alt")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FlightId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Hd")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Lat")
                        .HasColumnType("REAL");

                    b.Property<double?>("Lng")
                        .HasColumnType("REAL");

                    b.Property<long?>("Spd")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Ts")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.ToTable("Trails");
                });

            modelBuilder.Entity("FlightRadarCore.Model.AircraftElement", b =>
                {
                    b.HasOne("FlightRadarCore.Model.RouteDestination", "Airport")
                        .WithMany()
                        .HasForeignKey("AirportId");

                    b.HasOne("FlightRadarCore.Model.Flight", null)
                        .WithMany("FlightHistory")
                        .HasForeignKey("FlightId");

                    b.HasOne("FlightRadarCore.Model.AircraftIdentification", "Identification")
                        .WithMany()
                        .HasForeignKey("IdentificationId");

                    b.Navigation("Airport");

                    b.Navigation("Identification");
                });

            modelBuilder.Entity("FlightRadarCore.Model.Destination", b =>
                {
                    b.HasOne("FlightRadarCore.Model.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("FlightRadarCore.Model.TimeZone", "Timezone")
                        .WithMany()
                        .HasForeignKey("TimezoneId");

                    b.Navigation("Position");

                    b.Navigation("Timezone");
                });

            modelBuilder.Entity("FlightRadarCore.Model.Flight", b =>
                {
                    b.HasOne("FlightRadarCore.Model.Aircraft", "Aircraft")
                        .WithMany()
                        .HasForeignKey("AircraftId");

                    b.HasOne("FlightRadarCore.Model.Airline", "Airline")
                        .WithMany()
                        .HasForeignKey("AirlineId");

                    b.HasOne("FlightRadarCore.Model.RouteDestination", "Airport")
                        .WithMany()
                        .HasForeignKey("AirportId");

                    b.HasOne("FlightRadarCore.Model.FlightIdentification", "Identification")
                        .WithMany()
                        .HasForeignKey("IdentificationId");

                    b.HasOne("FlightRadarCore.Model.FlightStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("FlightRadarCore.Model.FlightTime", "Time")
                        .WithMany()
                        .HasForeignKey("TimeId");

                    b.Navigation("Aircraft");

                    b.Navigation("Airline");

                    b.Navigation("Airport");

                    b.Navigation("Identification");

                    b.Navigation("Status");

                    b.Navigation("Time");
                });

            modelBuilder.Entity("FlightRadarCore.Model.FlightStatus", b =>
                {
                    b.HasOne("FlightRadarCore.Model.Estimate", "Estimate")
                        .WithMany()
                        .HasForeignKey("EstimateId");

                    b.Navigation("Estimate");
                });

            modelBuilder.Entity("FlightRadarCore.Model.FlightTime", b =>
                {
                    b.HasOne("FlightRadarCore.Model.Estimate", "Estimated")
                        .WithMany()
                        .HasForeignKey("EstimatedId");

                    b.HasOne("FlightRadarCore.Model.Estimate", "Real")
                        .WithMany()
                        .HasForeignKey("RealId");

                    b.HasOne("FlightRadarCore.Model.Estimate", "Scheduled")
                        .WithMany()
                        .HasForeignKey("ScheduledId");

                    b.Navigation("Estimated");

                    b.Navigation("Real");

                    b.Navigation("Scheduled");
                });

            modelBuilder.Entity("FlightRadarCore.Model.RouteDestination", b =>
                {
                    b.HasOne("FlightRadarCore.Model.Destination", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId");

                    b.HasOne("FlightRadarCore.Model.Destination", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId");

                    b.HasOne("FlightRadarCore.Model.Estimate", "Real")
                        .WithMany()
                        .HasForeignKey("RealId");

                    b.Navigation("Destination");

                    b.Navigation("Origin");

                    b.Navigation("Real");
                });

            modelBuilder.Entity("FlightRadarCore.Model.Trail", b =>
                {
                    b.HasOne("FlightRadarCore.Model.Flight", "Flight")
                        .WithMany("Trails")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("FlightRadarCore.Model.Flight", b =>
                {
                    b.Navigation("FlightHistory");

                    b.Navigation("Trails");
                });
#pragma warning restore 612, 618
        }
    }
}
